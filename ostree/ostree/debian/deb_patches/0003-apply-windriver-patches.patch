From 2c58cbd1c2b95c7b75dc5660fc3c9b1aa722f51b Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Tue, 23 Mar 2021 23:31:02 +0800
Subject: [PATCH 03/24] apply windriver patches

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 ...recated-StandardOutput-syslog-with-j.patch |  49 ++++
 ...1-deploy-Handle-a-read-only-boot-efi.patch |  75 +++++
 ...rror-and-return-non-zero-for-non-ver.patch |  35 +++
 ...r-uboot.c-Create-links-to-the-deploy.patch |  72 +++++
 .../debian/0001-ostree-first-2-patch.patch    |  62 +++++
 ...eploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch |  37 +++
 ...ot-support-for-no-change-to-grub.cfg.patch | 103 +++++++
 ...updating-files-in-the-boot-directory.patch | 259 ++++++++++++++++++
 ...dd-bootdir-to-the-generated-uEnv.txt.patch |  53 ++++
 ...non-default-for-bootdirs-to-uEnv.txt.patch |  28 ++
 ...006-ostree-swap-bootentry-atomically.patch |  68 +++++
 .../debian/0007-using-bash-specifically.patch |  23 ++
 ...-boot-symlink-based-on-relative-path.patch |  32 +++
 ...rieve-correct-boot-prefix-at-runtime.patch |  26 ++
 ...-ostree-system-generator-for-wrlinux.patch |  50 ++++
 ...using-etc-in-runtime-as-merge-source.patch |  50 ++++
 debian/patches/series                         |  16 ++
 debian/rules                                  |   6 +-
 18 files changed, 1042 insertions(+), 2 deletions(-)
 create mode 100644 debian/patches/debian/0001-boot-Replace-deprecated-StandardOutput-syslog-with-j.patch
 create mode 100644 debian/patches/debian/0001-deploy-Handle-a-read-only-boot-efi.patch
 create mode 100644 debian/patches/debian/0001-fsck-Throw-and-error-and-return-non-zero-for-non-ver.patch
 create mode 100644 debian/patches/debian/0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch
 create mode 100644 debian/patches/debian/0001-ostree-first-2-patch.patch
 create mode 100644 debian/patches/debian/0001-ostree-sysroot-deploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch
 create mode 100644 debian/patches/debian/0002-ostree-secure-boot-support-for-no-change-to-grub.cfg.patch
 create mode 100644 debian/patches/debian/0003-Allow-updating-files-in-the-boot-directory.patch
 create mode 100644 debian/patches/debian/0004-u-boot-add-bootdir-to-the-generated-uEnv.txt.patch
 create mode 100644 debian/patches/debian/0005-uboot-add-non-default-for-bootdirs-to-uEnv.txt.patch
 create mode 100644 debian/patches/debian/0006-ostree-swap-bootentry-atomically.patch
 create mode 100644 debian/patches/debian/0007-using-bash-specifically.patch
 create mode 100644 debian/patches/debian/0008-create-boot-symlink-based-on-relative-path.patch
 create mode 100644 debian/patches/debian/0009-retrieve-correct-boot-prefix-at-runtime.patch
 create mode 100644 debian/patches/debian/0011-tweak-regex-of-ostree-system-generator-for-wrlinux.patch
 create mode 100644 debian/patches/debian/0012-deploy-using-etc-in-runtime-as-merge-source.patch

diff --git a/debian/patches/debian/0001-boot-Replace-deprecated-StandardOutput-syslog-with-j.patch b/debian/patches/debian/0001-boot-Replace-deprecated-StandardOutput-syslog-with-j.patch
new file mode 100644
index 00000000..7a25a050
--- /dev/null
+++ b/debian/patches/debian/0001-boot-Replace-deprecated-StandardOutput-syslog-with-j.patch
@@ -0,0 +1,49 @@
+From d3fadf14b7f7815845ca79768f10d20913df7d39 Mon Sep 17 00:00:00 2001
+From: Simon McVittie <smcv@collabora.com>
+Date: Fri, 21 Aug 2020 09:14:36 +0100
+Subject: [PATCH] boot: Replace deprecated StandardOutput=syslog with journal,
+ etc.
+
+systemd deprecated this in v246.
+
+Resolves: #2169
+Signed-off-by: Simon McVittie <smcv@collabora.com>
+Upstream-Status: Backport [https://github.com/ostreedev/ostree/commit/d3fadf1]
+
+Signed-off-by: Kai Kang <kai.kang@windriver.com>
+---
+ src/boot/ostree-prepare-root.service | 4 ++--
+ src/boot/ostree-remount.service      | 4 ++--
+ 2 files changed, 4 insertions(+), 4 deletions(-)
+
+diff --git a/src/boot/ostree-prepare-root.service b/src/boot/ostree-prepare-root.service
+index 91692205..250ffe71 100644
+--- a/src/boot/ostree-prepare-root.service
++++ b/src/boot/ostree-prepare-root.service
+@@ -30,6 +30,6 @@ Before=initrd-root-fs.target
+ Type=oneshot
+ ExecStart=/usr/lib/ostree/ostree-prepare-root /sysroot
+ StandardInput=null
+-StandardOutput=syslog
+-StandardError=syslog+console
++StandardOutput=journal
++StandardError=journal+console
+ RemainAfterExit=yes
+diff --git a/src/boot/ostree-remount.service b/src/boot/ostree-remount.service
+index 4c3ed94a..af40453c 100644
+--- a/src/boot/ostree-remount.service
++++ b/src/boot/ostree-remount.service
+@@ -35,8 +35,8 @@ Type=oneshot
+ RemainAfterExit=yes
+ ExecStart=/usr/lib/ostree/ostree-remount
+ StandardInput=null
+-StandardOutput=syslog
+-StandardError=syslog+console
++StandardOutput=journal
++StandardError=journal+console
+ 
+ [Install]
+ WantedBy=local-fs.target
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0001-deploy-Handle-a-read-only-boot-efi.patch b/debian/patches/debian/0001-deploy-Handle-a-read-only-boot-efi.patch
new file mode 100644
index 00000000..c833335f
--- /dev/null
+++ b/debian/patches/debian/0001-deploy-Handle-a-read-only-boot-efi.patch
@@ -0,0 +1,75 @@
+From 6c08b8af4a48a0cdece12e1edbc17be1f8969901 Mon Sep 17 00:00:00 2001
+From: Hongxu Jia <hongxu.jia@windriver.com>
+Date: Tue, 29 Oct 2019 17:04:33 +0800
+Subject: [PATCH] deploy: Handle a read-only /boot/efi
+
+In order to make `admin unlock --hotfix` work, refer upstream commit
+[8894bb3 deploy: Handle a read-only /boot][1], do the same thing on
+/boot/efi
+
+[1] https://github.com/ostreedev/ostree/commit/8894bb39498267f4ae06badc7aa54c4eb4bb7f73
+
+Upstream-Status: Inappropriate [wrlinux specific]
+
+Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
+---
+ src/libostree/ostree-sysroot-deploy.c | 26 ++++++++++++++++++++++++++
+ 1 file changed, 26 insertions(+)
+
+diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
+index a19f81a..63ffa68 100644
+--- a/src/libostree/ostree-sysroot-deploy.c
++++ b/src/libostree/ostree-sysroot-deploy.c
+@@ -2415,9 +2415,14 @@ ostree_sysroot_write_deployments_with_options (OstreeSysroot     *self,
+   else
+     {
+       gboolean boot_was_ro_mount = FALSE;
++      gboolean bootefi_was_ro_mount = FALSE;
++
+       if (self->booted_deployment)
+         boot_was_ro_mount = is_ro_mount ("/boot");
+ 
++      if (self->booted_deployment)
++        bootefi_was_ro_mount = is_ro_mount ("/boot/efi");
++
+       g_debug ("boot is ro: %s", boot_was_ro_mount ? "yes" : "no");
+ 
+       if (boot_was_ro_mount)
+@@ -2427,6 +2432,13 @@ ostree_sysroot_write_deployments_with_options (OstreeSysroot     *self,
+             return glnx_throw_errno_prefix (error, "Remounting /boot read-write");
+         }
+ 
++      g_debug ("boot/efi is ro: %s", bootefi_was_ro_mount ? "yes" : "no");
++      if (bootefi_was_ro_mount)
++        {
++          if (mount ("/boot/efi", "/boot/efi", NULL, MS_REMOUNT | MS_SILENT, NULL) < 0)
++            return glnx_throw_errno_prefix (error, "Remounting /boot/efi read-write");
++        }
++
+       if (!_ostree_sysroot_query_bootloader (self, &bootloader, cancellable, error))
+         return FALSE;
+       bootloader_is_atomic = bootloader != NULL && _ostree_bootloader_is_atomic (bootloader);
+@@ -2447,6 +2459,20 @@ ostree_sysroot_write_deployments_with_options (OstreeSysroot     *self,
+               g_printerr ("warning: Failed to remount /boot read-only: %s\n", strerror (errno));
+             }
+         }
++
++      if (bootefi_was_ro_mount)
++        {
++          if (mount ("/boot/efi", "/boot/efi", NULL, MS_REMOUNT | MS_RDONLY | MS_SILENT, NULL) < 0)
++            {
++              /* Only make this a warning because we don't want to
++               * completely bomb out if some other process happened to
++               * jump in and open a file there.  See above TODO
++               * around doing this in a new mount namespace.
++               */
++              g_printerr ("warning: Failed to remount /boot/efi read-only: %s\n", strerror (errno));
++            }
++        }
++
+       if (!success)
+         return FALSE;
+     }
+-- 
+2.7.4
+
diff --git a/debian/patches/debian/0001-fsck-Throw-and-error-and-return-non-zero-for-non-ver.patch b/debian/patches/debian/0001-fsck-Throw-and-error-and-return-non-zero-for-non-ver.patch
new file mode 100644
index 00000000..a2e2d6dd
--- /dev/null
+++ b/debian/patches/debian/0001-fsck-Throw-and-error-and-return-non-zero-for-non-ver.patch
@@ -0,0 +1,35 @@
+From 5acafcb2ac5f14028ffc24e7e63a1785e5deb2f0 Mon Sep 17 00:00:00 2001
+From: Jason Wessel <jason.wessel@windriver.com>
+Date: Wed, 26 Jun 2019 13:58:50 -0700
+Subject: [PATCH] fsck: Throw and error and return non-zero for non-verified
+ commits
+
+After the corruption has been fixed with "ostree fsck -a --delete", a
+second run of the "ostree fsck" command will print X partial commits
+not verified and exit with a zero.
+
+The zero exit code makes it hard to detect if a repair operation needs
+to be run, it is easier to check an exit code than try to parse the
+text that is emitted from the ostree fsck.
+
+Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
+---
+ src/ostree/ot-builtin-fsck.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/ostree/ot-builtin-fsck.c b/src/ostree/ot-builtin-fsck.c
+index a7ecd3d0..032e73cb 100644
+--- a/src/ostree/ot-builtin-fsck.c
++++ b/src/ostree/ot-builtin-fsck.c
+@@ -444,7 +444,7 @@ ostree_builtin_fsck (int argc, char **argv, OstreeCommandInvocation *invocation,
+     }
+   else if (n_partial > 0)
+     {
+-      g_print ("%u partial commits not verified\n", n_partial);
++      return glnx_throw (error, "%u partial commits not verified", n_partial);
+     }
+ 
+   if (found_corruption)
+-- 
+2.21.0
+
diff --git a/debian/patches/debian/0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch b/debian/patches/debian/0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch
new file mode 100644
index 00000000..125c8773
--- /dev/null
+++ b/debian/patches/debian/0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch
@@ -0,0 +1,72 @@
+From 0bf6d86510689f5f125f8290abf24e50bb284ffc Mon Sep 17 00:00:00 2001
+From: Jason Wessel <jason.wessel@windriver.com>
+Date: Thu, 22 Aug 2019 12:00:27 -0700
+Subject: [PATCH] ostree-bootloader-uboot.c: Create links to the deploy
+ directory in /boot
+
+Having service links in the deploy directory allows a boot loader to
+be more throughly locked down.  For example:
+
+% ls -l /boot/? |awk '{print $1" "$9" "$10" "$11}'
+lrwxrwxrwx /boot/1 -> ostree/wrlinux-7d5ec36921a5a5e5b5ecc98da29378581a4ed49e93418f5a8f096a85c62e46ae
+lrwxrwxrwx /boot/2 -> ostree/wrlinux-0713c2f3c782a77f7579e5b94c5a17935f35070c2e73f80a6a52f9304d07812e
+
+The kernel arguments are not taken from the ostree "hints" in this
+case, because the configuration is much more locked down and there no
+command used in u-boot to run "env import ...".  The boot loader will
+use the service links and other variables to select a rollback or
+primary boot choices.
+
+Upstream-Status: pending
+
+Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
+---
+ src/libostree/ostree-bootloader-uboot.c | 25 +++++++++++++++++++++++++
+ 1 file changed, 25 insertions(+)
+
+diff --git a/src/libostree/ostree-bootloader-uboot.c b/src/libostree/ostree-bootloader-uboot.c
+index 2d99466e..7c6e48cc 100644
+--- a/src/libostree/ostree-bootloader-uboot.c
++++ b/src/libostree/ostree-bootloader-uboot.c
+@@ -139,6 +139,14 @@ create_config_from_boot_loader_entries (OstreeBootloaderUboot     *self,
+ 
+       bootdir = strndup (val, strrchr(val, '/') - val);
+       g_ptr_array_add (new_lines, g_strdup_printf ("bootdir%s=%s/", index_suffix, bootdir));
++      g_autofree char *lbootdir = g_strdup_printf ("boot/%i", i + 1);
++      unlinkat(self->sysroot->sysroot_fd, lbootdir, 0);
++      if (symlinkat(bootdir + 1, self->sysroot->sysroot_fd, lbootdir) < 0)
++        {
++          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
++                       "Could not link boot directory.");
++          return FALSE;
++        }
+ 
+       val = ostree_bootconfig_parser_get (config, "initrd");
+       if (val)
+@@ -155,6 +163,23 @@ create_config_from_boot_loader_entries (OstreeBootloaderUboot     *self,
+           if (i == 0)
+             if (!append_system_uenv (self, val, new_lines, cancellable, error))
+               return FALSE;
++            g_auto(GStrv) opts = g_strsplit (val, " ", -1);
++            for (char **iter = opts; *iter; iter++)
++              {
++                const char *opt = *iter;
++                if (g_str_has_prefix (opt, "ostree=/ostree/"))
++                  {
++                    g_autofree char *boot_link = g_strdup (opt + strlen ("ostree=/ostree/"));
++                    g_autofree char *linkdir = g_strdup_printf ("ostree/%i", i + 1);
++                    unlinkat(self->sysroot->sysroot_fd, linkdir, 0);
++                    if (symlinkat(boot_link, self->sysroot->sysroot_fd, linkdir) < 0)
++                      {
++                        g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
++                                     "Could not link boot directory.");
++                        return FALSE;
++                      }
++                  }
++              }
+         }
+     }
+ 
+-- 
+2.21.0
+
diff --git a/debian/patches/debian/0001-ostree-first-2-patch.patch b/debian/patches/debian/0001-ostree-first-2-patch.patch
new file mode 100644
index 00000000..2fd21bd1
--- /dev/null
+++ b/debian/patches/debian/0001-ostree-first-2-patch.patch
@@ -0,0 +1,62 @@
+From 11a1b04d65b521519e27d0190af75a648ff85634 Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Thu, 27 Sep 2018 16:40:59 +0800
+Subject: [PATCH 01/12] ostree:first 2 patch
+
+Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator | 12 +++++++++++-
+ src/libostree/ostree-core.c          |  6 ++++--
+ 2 files changed, 15 insertions(+), 3 deletions(-)
+
+diff --git a/src/boot/grub2/ostree-grub-generator b/src/boot/grub2/ostree-grub-generator
+index 10645c74..ed0694bd 100644
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -24,7 +24,16 @@ set -e
+ script=$(basename ${0})
+ # Atomically safe location where to generete grub.cfg when executing system upgrade.
+ new_grub2_cfg=${2}
+-entries_path=$(dirname $new_grub2_cfg)/entries
++#entries_path=$(dirname $new_grub2_cfg)/entries
++if [ -n "$_OSTREE_GRUB2_BOOTVERSION" -a -d /boot/loader.${_OSTREE_GRUB2_BOOTVERSION}/entries ]; then
++    entries_path="/boot/loader.${_OSTREE_GRUB2_BOOTVERSION}/entries"
++else
++    if [ -d $(dirname $new_grub2_cfg)/../../../loader.${_OSTREE_GRUB2_BOOTVERSION}/entries ]; then
++        entries_path=$(dirname $new_grub2_cfg)/../../../loader.${_OSTREE_GRUB2_BOOTVERSION}/entries
++    else
++        entries_path=$(dirname $new_grub2_cfg)/entries
++    fi
++fi
+ 
+ read_config()
+ {
+@@ -101,6 +110,7 @@ cat >> ${new_grub2_cfg} <<EOF
+ serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1
+ default=boot
+ timeout=10
++set root=(hd0,msdos2)
+ 
+ EOF
+ }
+diff --git a/src/libostree/ostree-core.c b/src/libostree/ostree-core.c
+index 4e1a67e0..d0a7517a 100644
+--- a/src/libostree/ostree-core.c
++++ b/src/libostree/ostree-core.c
+@@ -2277,9 +2277,11 @@ _ostree_validate_bareuseronly_mode (guint32     content_mode,
+   if (S_ISREG (content_mode))
+     {
+       const guint32 invalid_modebits = ((content_mode & ~S_IFMT) & ~0775);
+-      if (invalid_modebits > 0)
+-        return glnx_throw (error, "Content object %s: invalid mode 0%04o with bits 0%04o",
++/*      if (invalid_modebits > 0)
++        glnx_throw (error, "Content object %s: invalid mode 0%04o with bits 0%04o",
+                            checksum, content_mode, invalid_modebits);
++*/
++
+     }
+   else if (S_ISLNK (content_mode))
+     ; /* Nothing */
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0001-ostree-sysroot-deploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch b/debian/patches/debian/0001-ostree-sysroot-deploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch
new file mode 100644
index 00000000..074f11e7
--- /dev/null
+++ b/debian/patches/debian/0001-ostree-sysroot-deploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch
@@ -0,0 +1,37 @@
+From c6a4ef6390c27c4e22eed950c297c2159ce46a9d Mon Sep 17 00:00:00 2001
+From: Jason Wessel <jason.wessel@windriver.com>
+Date: Fri, 22 Nov 2019 07:07:51 -0800
+Subject: [PATCH] ostree-sysroot-deploy: if OSTREE_ETC_MERGE_DIR = "none" skip
+ merge
+
+Upstream-Status: Inappropriate [ specific to ostree_upgrade.sh functions ]
+
+Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
+---
+ src/libostree/ostree-sysroot-deploy.c | 8 ++++++--
+ 1 file changed, 6 insertions(+), 2 deletions(-)
+
+diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
+index 63ffa689..15a2dee0 100644
+--- a/src/libostree/ostree-sysroot-deploy.c
++++ b/src/libostree/ostree-sysroot-deploy.c
+@@ -442,10 +442,14 @@ merge_configuration_from (OstreeSysroot    *sysroot,
+   g_autoptr(GFile) orig_etc = ot_fdrel_to_gfile (merge_deployment_dfd, "usr/etc");
+   char *etc_merge_dir = getenv("OSTREE_ETC_MERGE_DIR");
+   g_autoptr(GFile) modified_etc;
+-  if (etc_merge_dir)
++  if (etc_merge_dir) {
++    /* if OSTREE_ETC_MERGE_DIR = "none" skip merge */
++    if (!strcmp(etc_merge_dir, "none"))
++      return TRUE;
+     modified_etc = g_file_new_for_path(etc_merge_dir);
+-  else
++  } else {
+     modified_etc = ot_fdrel_to_gfile (merge_deployment_dfd, "etc");
++  }
+   /* Return values for below */
+   g_autoptr(GPtrArray) modified = g_ptr_array_new_with_free_func ((GDestroyNotify) ostree_diff_item_unref);
+   g_autoptr(GPtrArray) removed = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
+-- 
+2.23.0
+
diff --git a/debian/patches/debian/0002-ostree-secure-boot-support-for-no-change-to-grub.cfg.patch b/debian/patches/debian/0002-ostree-secure-boot-support-for-no-change-to-grub.cfg.patch
new file mode 100644
index 00000000..c8cf387d
--- /dev/null
+++ b/debian/patches/debian/0002-ostree-secure-boot-support-for-no-change-to-grub.cfg.patch
@@ -0,0 +1,103 @@
+From 025f283020d2a1240beb8df44faadf5b3581f09d Mon Sep 17 00:00:00 2001
+From: fupan li <fupan.li@windriver.com>
+Date: Mon, 22 Jan 2018 14:18:18 +0800
+Subject: [PATCH 02/12] ostree: secure boot support for no change to grub.cfg
+
+Signed-off-by: fupan li <fupan.li@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator    | 33 +++++++++++++++++++++++++
+ src/libostree/ostree-bootloader-grub2.c |  3 ++-
+ 2 files changed, 35 insertions(+), 1 deletion(-)
+
+diff --git a/src/boot/grub2/ostree-grub-generator b/src/boot/grub2/ostree-grub-generator
+index ed0694bd..c515ec9b 100644
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -35,12 +35,15 @@ else
+     fi
+ fi
+ 
++sysroot_dir=${3}
++
+ read_config()
+ {
+     config_file=${1}
+     title=""
+     initrd=""
+     options=""
++    ostree=""
+     linux=""
+     devicetree=""
+ 
+@@ -63,6 +66,7 @@ read_config()
+                 ;;
+             "options")
+                 options=${value}
++                ostree=`echo ${value} | sed 's/^.*ostree=\([^ ]*\).*$/\1/'`
+                 ;;
+         esac
+     done < ${config_file}
+@@ -80,6 +84,7 @@ populate_menu()
+     else
+         boot_prefix="${OSTREE_BOOT_PARTITION}"
+     fi
++    count=0
+     for config in $(ls -v -r $entries_path/*.conf); do
+         read_config ${config}
+         menu="${menu}menuentry '${title}' {\n"
+@@ -91,7 +96,35 @@ populate_menu()
+             menu="${menu}\t devicetree ${boot_prefix}${devicetree}\n"
+         fi
+         menu="${menu}}\n\n"
++
++        linux_dir=`dirname ${sysroot_dir}/${boot_prefix}${linux}`
++        linux_parent_dir=`basename ${linux_dir}`
++        if [ -L ${linux_dir}/../${count} ]; then
++	    unlink ${linux_dir}/../${count}
++        fi	
++        ln -sf ${linux_parent_dir} ${linux_dir}/../${count}
++        ostree_boot_dir="${sysroot_dir}/${ostree}/../../../../boot"
++        ostree_dir=`echo ${ostree} | cut -s -f3- -d '/'`
++        if [ ! -d ${ostree_boot_dir} ]; then
++            mkdir ${ostree_boot_dir}
++        fi
++        if [ -L ${ostree_boot_dir}/${count} ]; then
++            unlink ${ostree_boot_dir}/${count}
++        fi
++        ln -sf ../${ostree_dir} ${ostree_boot_dir}/${count}
++        count=`expr $count + 1`        
+     done
++
++    if [ $count -eq 1 ]; then
++        if [ -L ${linux_dir}/../${count} ]; then
++            unlink ${linux_dir}/../${count}
++        fi
++        if [ -L ${ostree_boot_dir}/${count} ]; then
++            unlink ${ostree_boot_dir}/${count}
++        fi
++        ln -sf ${linux_parent_dir} ${linux_dir}/../${count}
++        ln -sf ../${ostree_dir} ${ostree_boot_dir}/${count}
++    fi
+     # The printf command seems to be more reliable across shells for special character (\n, \t) evaluation
+     printf "$menu" >> ${new_grub2_cfg}
+ }
+diff --git a/src/libostree/ostree-bootloader-grub2.c b/src/libostree/ostree-bootloader-grub2.c
+index 57673c7d..b126bd99 100644
+--- a/src/libostree/ostree-bootloader-grub2.c
++++ b/src/libostree/ostree-bootloader-grub2.c
+@@ -396,10 +396,11 @@ _ostree_bootloader_grub2_write_config (OstreeBootloader      *bootloader,
+                                                       bootversion);
+     }
+ 
+-  const char *grub_argv[4] = { NULL, "-o", NULL, NULL};
++  const char *grub_argv[5] = { NULL, "-o", NULL, NULL, NULL};
+   Grub2ChildSetupData cdata = { NULL, };
+   grub_argv[0] = grub_exec;
+   grub_argv[2] = gs_file_get_path_cached (new_config_path);
++  grub_argv[3] = g_file_get_path (self->sysroot->path);
+ 
+   GSpawnFlags grub_spawnflags = G_SPAWN_SEARCH_PATH;
+   if (!g_getenv ("OSTREE_DEBUG_GRUB2"))
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0003-Allow-updating-files-in-the-boot-directory.patch b/debian/patches/debian/0003-Allow-updating-files-in-the-boot-directory.patch
new file mode 100644
index 00000000..54e601d7
--- /dev/null
+++ b/debian/patches/debian/0003-Allow-updating-files-in-the-boot-directory.patch
@@ -0,0 +1,259 @@
+From 654f0df23e2590b29ebd26f10f5aeb42a822380c Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Tue, 22 Jan 2019 18:00:00 +0800
+Subject: [PATCH 03/12] Allow updating files in the /boot directory
+
+This patch adds support for copying (or hardlinking on
+single partition systems) all files from the deployment's
+/usr/lib/ostree-boot directory to the relevant
+/boot/ostree/$os-$bootcsum/ directory. This feature can
+be enabled by 'touch .ostree-bootcsumdir-source' in
+/usr/lib/ostree-boot.
+---
+ src/libostree/ostree-sysroot-deploy.c | 169 ++++++++++++++++++--------
+ 1 file changed, 121 insertions(+), 48 deletions(-)
+
+diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
+index b16f65b3..1697a06e 100644
+--- a/src/libostree/ostree-sysroot-deploy.c
++++ b/src/libostree/ostree-sysroot-deploy.c
+@@ -96,42 +96,24 @@ sysroot_flags_to_copy_flags (GLnxFileCopyFlags defaults,
+ }
+ 
+ /* Try a hardlink if we can, otherwise fall back to copying.  Used
+- * right now for kernels/initramfs/device trees in /boot, where we can just
++ * right now for kernels/initramfs in /boot, where we can just
+  * hardlink if we're on the same partition.
+  */
+ static gboolean
+-install_into_boot (OstreeSePolicy *sepolicy,
+-                   int         src_dfd,
+-                   const char *src_subpath,
+-                   int         dest_dfd,
+-                   const char *dest_subpath,
+-                   OstreeSysrootDebugFlags flags,
+-                   GCancellable  *cancellable,
+-                   GError       **error)
++hardlink_or_copy_at (int         src_dfd,
++                     const char *src_subpath,
++                     int         dest_dfd,
++                     const char *dest_subpath,
++                     OstreeSysrootDebugFlags flags,
++                     GCancellable  *cancellable,
++                     GError       **error)
+ {
+   if (linkat (src_dfd, src_subpath, dest_dfd, dest_subpath, 0) != 0)
+     {
+       if (G_IN_SET (errno, EMLINK, EXDEV))
+-        {
+-          /* Be sure we relabel when copying the kernel, as in current
+-           * e.g. Fedora it might be labeled module_object_t or usr_t,
+-           * but policy may not allow other processes to read from that
+-           * like kdump.
+-           * See also https://github.com/fedora-selinux/selinux-policy/commit/747f4e6775d773ab74efae5aa37f3e5e7f0d4aca
+-           * This means we also drop xattrs but...I doubt anyone uses
+-           * non-SELinux xattrs for the kernel anyways aside from perhaps
+-           * IMA but that's its own story.
+-           */
+-          g_auto(OstreeSepolicyFsCreatecon) fscreatecon = { 0, };
+-          const char *boot_path = glnx_strjoina ("/boot/", glnx_basename (dest_subpath));
+-          if (!_ostree_sepolicy_preparefscreatecon (&fscreatecon, sepolicy,
+-                                                    boot_path, S_IFREG | 0644,
+-                                                    error))
+-            return FALSE;
+-          return glnx_file_copy_at (src_dfd, src_subpath, NULL, dest_dfd, dest_subpath,
+-                                    GLNX_FILE_COPY_NOXATTRS | GLNX_FILE_COPY_DATASYNC,
+-                                    cancellable, error);
+-        }
++        return glnx_file_copy_at (src_dfd, src_subpath, NULL, dest_dfd, dest_subpath,
++                                  sysroot_flags_to_copy_flags (0, flags),
++                                  cancellable, error);
+       else
+         return glnx_throw_errno_prefix (error, "linkat(%s)", dest_subpath);
+     }
+@@ -176,6 +158,15 @@ dirfd_copy_attributes_and_xattrs (int            src_parent_dfd,
+   return TRUE;
+ }
+ 
++static gboolean
++hardlink_or_copy_dir_recurse (int  src_parent_dfd,
++                  int              dest_parent_dfd,
++                  const char      *name,
++                  gboolean         hardlink,
++                  OstreeSysrootDebugFlags flags,
++                  GCancellable    *cancellable,
++                  GError         **error);
++
+ static gboolean
+ copy_dir_recurse (int              src_parent_dfd,
+                   int              dest_parent_dfd,
+@@ -183,6 +174,18 @@ copy_dir_recurse (int              src_parent_dfd,
+                   OstreeSysrootDebugFlags flags,
+                   GCancellable    *cancellable,
+                   GError         **error)
++{
++    return hardlink_or_copy_dir_recurse (src_parent_dfd, dest_parent_dfd, name, FALSE, flags, cancellable, error);
++}
++
++static gboolean
++hardlink_or_copy_dir_recurse (int  src_parent_dfd,
++                  int              dest_parent_dfd,
++                  const char      *name,
++                  gboolean         hardlink,
++                  OstreeSysrootDebugFlags flags,
++                  GCancellable    *cancellable,
++                  GError         **error)
+ {
+   g_auto(GLnxDirFdIterator) src_dfd_iter = { 0, };
+   glnx_autofd int dest_dfd = -1;
+@@ -217,17 +220,28 @@ copy_dir_recurse (int              src_parent_dfd,
+ 
+       if (S_ISDIR (child_stbuf.st_mode))
+         {
+-          if (!copy_dir_recurse (src_dfd_iter.fd, dest_dfd, dent->d_name,
+-                                 flags, cancellable, error))
++          if (!hardlink_or_copy_dir_recurse (src_dfd_iter.fd, dest_dfd, dent->d_name,
++                                 hardlink, flags, cancellable, error))
+             return FALSE;
+         }
+       else
+         {
+-          if (!glnx_file_copy_at (src_dfd_iter.fd, dent->d_name, &child_stbuf,
+-                                  dest_dfd, dent->d_name,
+-                                  sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags),
+-                                  cancellable, error))
+-            return FALSE;
++          if (hardlink)
++          {
++              if (!hardlink_or_copy_at (src_dfd_iter.fd, dent->d_name,
++                                        dest_dfd, dent->d_name, 
++                                        sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags), 
++                                        cancellable, error))
++                return FALSE;
++          }
++          else
++          {
++              if (!glnx_file_copy_at (src_dfd_iter.fd, dent->d_name, &child_stbuf,
++                                      dest_dfd, dent->d_name,
++                                      sysroot_flags_to_copy_flags (GLNX_FILE_COPY_OVERWRITE, flags),
++                                      cancellable, error))
++              return FALSE;
++           }
+         }
+     }
+ 
+@@ -1602,6 +1616,7 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
+ 
+ {
+   GLNX_AUTO_PREFIX_ERROR ("Installing kernel", error);
++  g_auto(GLnxDirFdIterator) dfd_iter = { 0, };
+   OstreeBootconfigParser *bootconfig = ostree_deployment_get_bootconfig (deployment);
+   g_autofree char *deployment_dirpath = ostree_sysroot_get_deployment_dirpath (sysroot, deployment);
+   glnx_autofd int deployment_dfd = -1;
+@@ -1650,10 +1665,11 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
+     return FALSE;
+   if (errno == ENOENT)
+     {
+-      if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->kernel_srcpath,
+-                              bootcsum_dfd, kernel_layout->kernel_namever,
+-                              sysroot->debug_flags,
+-                              cancellable, error))
++      if (!hardlink_or_copy_at (kernel_layout->boot_dfd,
++                                kernel_layout->kernel_srcpath,
++                                bootcsum_dfd, kernel_layout->kernel_namever,
++                                sysroot->debug_flags,
++                                cancellable, error))
+         return FALSE;
+     }
+ 
+@@ -1667,10 +1683,10 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
+         return FALSE;
+       if (errno == ENOENT)
+         {
+-          if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
+-                                  bootcsum_dfd, kernel_layout->initramfs_namever,
+-                                  sysroot->debug_flags,
+-                                  cancellable, error))
++          if (!hardlink_or_copy_at (kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
++                                    bootcsum_dfd, kernel_layout->initramfs_namever,
++                                    sysroot->debug_flags,
++                                    cancellable, error))
+             return FALSE;
+         }
+     }
+@@ -1682,11 +1698,68 @@ install_deployment_kernel (OstreeSysroot   *sysroot,
+         return FALSE;
+       if (errno == ENOENT)
+         {
+-          if (!install_into_boot (sepolicy, kernel_layout->boot_dfd, kernel_layout->devicetree_srcpath,
+-                                  bootcsum_dfd, kernel_layout->devicetree_namever,
+-                                  sysroot->debug_flags,
+-                                  cancellable, error))
++          if (!hardlink_or_copy_at (kernel_layout->boot_dfd, kernel_layout->initramfs_srcpath,
++                                    bootcsum_dfd, kernel_layout->devicetree_namever,
++                                    sysroot->debug_flags,
++                                    cancellable, error))
++            return FALSE;
++        }
++    }
++
++    if (fstatat (kernel_layout->boot_dfd, ".ostree-bootcsumdir-source", &stbuf, 0) == 0)
++    {
++      if (!glnx_dirfd_iterator_init_at (kernel_layout->boot_dfd, ".", FALSE, &dfd_iter, error))
++        return FALSE;
++
++      while (TRUE)
++        {
++          struct dirent *dent;
++
++          if (!glnx_dirfd_iterator_next_dent (&dfd_iter, &dent, cancellable, error))
+             return FALSE;
++          if (dent == NULL)
++            break;
++
++          /* Skip special files - vmlinuz-* and initramfs-* are handled separately */
++          if (g_str_has_prefix (dent->d_name, "vmlinuz-") || g_str_has_prefix (dent->d_name, "initramfs-"))
++            continue;
++
++          if (fstatat (bootcsum_dfd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
++            {
++              if (errno != ENOENT)
++                {
++                  glnx_set_prefix_error_from_errno (error, "fstatat %s", dent->d_name);
++                  return FALSE;
++                }
++
++              if (fstatat (dfd_iter.fd, dent->d_name, &stbuf, AT_SYMLINK_NOFOLLOW) != 0)
++                {
++                  glnx_set_error_from_errno (error);
++                  return FALSE;
++                }
++
++              if (S_ISDIR (stbuf.st_mode))
++                {
++                  if (!hardlink_or_copy_dir_recurse (kernel_layout->boot_dfd, bootcsum_dfd, dent->d_name,
++                                                     TRUE, sysroot->debug_flags, cancellable, error))
++                    return FALSE;
++                }
++              else
++                {
++                  if (!hardlink_or_copy_at (kernel_layout->boot_dfd, dent->d_name,
++                                            bootcsum_dfd, dent->d_name, sysroot->debug_flags, 
++                                            cancellable, error))
++                    return FALSE;
++                }
++            }
++        }
++    }
++    else
++    {
++      if (errno != ENOENT)
++        {
++          glnx_set_prefix_error_from_errno (error, "fstatat %s", ".ostree-bootcsumdir-source");
++          return FALSE;
+         }
+     }
+ 
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0004-u-boot-add-bootdir-to-the-generated-uEnv.txt.patch b/debian/patches/debian/0004-u-boot-add-bootdir-to-the-generated-uEnv.txt.patch
new file mode 100644
index 00000000..eec2fc2d
--- /dev/null
+++ b/debian/patches/debian/0004-u-boot-add-bootdir-to-the-generated-uEnv.txt.patch
@@ -0,0 +1,53 @@
+From aeef33de102ae7c26ee10b6e02f8caa59cdb0f20 Mon Sep 17 00:00:00 2001
+From: Gatis Paeglis <gatis.paeglis@qt.io>
+Date: Mon, 22 Aug 2016 15:52:21 +0200
+Subject: [PATCH 04/12] u-boot: add 'bootdir' to the generated uEnv.txt
+
+When doing a full copy of:
+
+$deployment/usr/lib/ostree-boot -> /boot/ostree/$os-$bootcsum/
+
+U-Boot bootscript can use the 'bootdir' to find, for example,
+the Device Tree (dtb) file, as in:
+
+load ${dtype} ${disk}:${bootpart} ${a_fdt} ${bootdir}${dtbname}
+
+Or u-boot external bootscript:
+
+load ${dtype} ${disk}:${bootpart} ${a_scr} ${bootdir}${scriptname}
+
+It could also be possible to point 'bootdir' directly to the
+$deployment/usr/lib/ostree-boot, but this would add unnecessary
+restrictions on what file system can be used for rootfs as u-boot,
+for example, can not read from BTRFS. So having
+bootdir=/boot/ostree/$os-$bootcsum/ is a better approach here, as
+/boot can be on a separate partition with its own file system type.
+---
+ src/libostree/ostree-bootloader-uboot.c | 4 ++++
+ 1 file changed, 4 insertions(+)
+
+diff --git a/src/libostree/ostree-bootloader-uboot.c b/src/libostree/ostree-bootloader-uboot.c
+index 531a3756..6da41cc4 100644
+--- a/src/libostree/ostree-bootloader-uboot.c
++++ b/src/libostree/ostree-bootloader-uboot.c
+@@ -113,6 +113,7 @@ create_config_from_boot_loader_entries (OstreeBootloaderUboot     *self,
+   g_autoptr(GPtrArray) boot_loader_configs = NULL;
+   OstreeBootconfigParser *config;
+   const char *val;
++  g_autofree char *bootdir = NULL;
+ 
+   if (!_ostree_sysroot_read_boot_loader_configs (self->sysroot, bootversion, &boot_loader_configs,
+                                                  cancellable, error))
+@@ -136,6 +137,9 @@ create_config_from_boot_loader_entries (OstreeBootloaderUboot     *self,
+         }
+       g_ptr_array_add (new_lines, g_strdup_printf ("kernel_image%s=%s", index_suffix, val));
+ 
++      bootdir = strndup (val, strrchr(val, '/') - val);
++      g_ptr_array_add (new_lines, g_strdup_printf ("bootdir=%s/", bootdir));
++
+       val = ostree_bootconfig_parser_get (config, "initrd");
+       if (val)
+         g_ptr_array_add (new_lines, g_strdup_printf ("ramdisk_image%s=%s", index_suffix, val));
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0005-uboot-add-non-default-for-bootdirs-to-uEnv.txt.patch b/debian/patches/debian/0005-uboot-add-non-default-for-bootdirs-to-uEnv.txt.patch
new file mode 100644
index 00000000..15a825ce
--- /dev/null
+++ b/debian/patches/debian/0005-uboot-add-non-default-for-bootdirs-to-uEnv.txt.patch
@@ -0,0 +1,28 @@
+From 9ed2ce2f70c87bb8ff89043e324e0f7f79c52f1d Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Fri, 25 May 2018 13:00:47 +0800
+Subject: [PATCH 05/12] uboot: add non-default for bootdirs to uEnv.txt
+
+Add index for non-default bootdirs in uEnv.txt.
+
+Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
+---
+ src/libostree/ostree-bootloader-uboot.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/libostree/ostree-bootloader-uboot.c b/src/libostree/ostree-bootloader-uboot.c
+index 6da41cc4..2d99466e 100644
+--- a/src/libostree/ostree-bootloader-uboot.c
++++ b/src/libostree/ostree-bootloader-uboot.c
+@@ -138,7 +138,7 @@ create_config_from_boot_loader_entries (OstreeBootloaderUboot     *self,
+       g_ptr_array_add (new_lines, g_strdup_printf ("kernel_image%s=%s", index_suffix, val));
+ 
+       bootdir = strndup (val, strrchr(val, '/') - val);
+-      g_ptr_array_add (new_lines, g_strdup_printf ("bootdir=%s/", bootdir));
++      g_ptr_array_add (new_lines, g_strdup_printf ("bootdir%s=%s/", index_suffix, bootdir));
+ 
+       val = ostree_bootconfig_parser_get (config, "initrd");
+       if (val)
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0006-ostree-swap-bootentry-atomically.patch b/debian/patches/debian/0006-ostree-swap-bootentry-atomically.patch
new file mode 100644
index 00000000..21254e58
--- /dev/null
+++ b/debian/patches/debian/0006-ostree-swap-bootentry-atomically.patch
@@ -0,0 +1,68 @@
+From cc56b8f7a4d2ad6be9c27d9d304997d7be73cae9 Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Thu, 27 Sep 2018 17:10:13 +0800
+Subject: [PATCH 06/12] ostree:swap bootentry atomically
+
+Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator |   44 ++++++++++++++++-------------------
+ 1 file changed, 21 insertions(+), 23 deletions(-)
+
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -97,34 +97,32 @@ populate_menu()
+         fi
+         menu="${menu}}\n\n"
+ 
+-        linux_dir=`dirname ${sysroot_dir}/${boot_prefix}${linux}`
+-        linux_parent_dir=`basename ${linux_dir}`
+-        if [ -L ${linux_dir}/../${count} ]; then
+-	    unlink ${linux_dir}/../${count}
+-        fi	
+-        ln -sf ${linux_parent_dir} ${linux_dir}/../${count}
+-        ostree_boot_dir="${sysroot_dir}/${ostree}/../../../../boot"
+-        ostree_dir=`echo ${ostree} | cut -s -f3- -d '/'`
+-        if [ ! -d ${ostree_boot_dir} ]; then
+-            mkdir ${ostree_boot_dir}
+-        fi
+-        if [ -L ${ostree_boot_dir}/${count} ]; then
+-            unlink ${ostree_boot_dir}/${count}
+-        fi
+-        ln -sf ../${ostree_dir} ${ostree_boot_dir}/${count}
++        linux_dir=`dirname ${boot_prefix}${linux}`
++        boots[$count]=`mktemp -d ${sysroot_dir}${boot_prefix}/boot.XXXXXXXXXX`
++        ln -sf ${linux_dir} ${boots[$count]}/boot
++        ln -sf ../..${ostree} ${boots[$count]}/ostree
+         count=`expr $count + 1`        
+     done
+ 
+-    if [ $count -eq 1 ]; then
+-        if [ -L ${linux_dir}/../${count} ]; then
+-            unlink ${linux_dir}/../${count}
++    for i in 1 0; do
++        if [ -n "${boots[$i]}" -a -d "${boots[$i]}" ]; then
++	    rm -f ${sysroot_dir}${boot_prefix}/$i
++            ln -s `basename ${boots[$i]}` ${sysroot_dir}${boot_prefix}/$i
++        elif [ -n "${boots[0]}" -a -d "${boots[0]}" ]; then
++	    rm -f ${sysroot_dir}${boot_prefix}/$i
++            ln -s `basename ${boots[0]}`  ${sysroot_dir}${boot_prefix}/$i
+         fi
+-        if [ -L ${ostree_boot_dir}/${count} ]; then
+-            unlink ${ostree_boot_dir}/${count}
++    done
++
++    #rm the directories unlinked
++    cd ${sysroot_dir}${boot_prefix}
++    for i in boot\.*; do
++        num=`find . -lname $i | wc -l`
++        if [ $num -eq 0 ]; then
++            rm -rf $i
+         fi
+-        ln -sf ${linux_parent_dir} ${linux_dir}/../${count}
+-        ln -sf ../${ostree_dir} ${ostree_boot_dir}/${count}
+-    fi
++    done
++    cd -
+     # The printf command seems to be more reliable across shells for special character (\n, \t) evaluation
+     printf "$menu" >> ${new_grub2_cfg}
+ }
diff --git a/debian/patches/debian/0007-using-bash-specifically.patch b/debian/patches/debian/0007-using-bash-specifically.patch
new file mode 100644
index 00000000..b70bc958
--- /dev/null
+++ b/debian/patches/debian/0007-using-bash-specifically.patch
@@ -0,0 +1,23 @@
+From dcc782782b2645e34cff7b5e7071f54d286d269d Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Thu, 27 Sep 2018 17:13:01 +0800
+Subject: [PATCH 07/12] using bash specifically
+
+Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/src/boot/grub2/ostree-grub-generator b/src/boot/grub2/ostree-grub-generator
+index fc8acaad..36f4919f 100644
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -1,4 +1,4 @@
+-#!/bin/sh
++#!/bin/bash
+ 
+ # The builtin grub.cfg generator. This script is called by
+ # ostree/src/libostree/ostree-bootloader-grub2.c whenever boot loader
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0008-create-boot-symlink-based-on-relative-path.patch b/debian/patches/debian/0008-create-boot-symlink-based-on-relative-path.patch
new file mode 100644
index 00000000..5168514d
--- /dev/null
+++ b/debian/patches/debian/0008-create-boot-symlink-based-on-relative-path.patch
@@ -0,0 +1,32 @@
+From 06441fa7012e28f4a1bb77985237d679d1347a44 Mon Sep 17 00:00:00 2001
+From: Yunguo Wei <yunguo.wei@windriver.com>
+Date: Sat, 5 May 2018 17:49:06 +0800
+Subject: [PATCH 08/12] create boot symlink based on relative path
+
+If /boot is a seperated boot partition, grub will set root device to
+boot partition and an abs path doesn't make senese.
+
+Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/src/boot/grub2/ostree-grub-generator b/src/boot/grub2/ostree-grub-generator
+index 36f4919f..a399336e 100644
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -97,9 +97,9 @@ populate_menu()
+         fi
+         menu="${menu}}\n\n"
+ 
+-        linux_dir=`dirname ${boot_prefix}${linux}`
++        linux_dir=`dirname ${linux}`
+         boots[$count]=`mktemp -d ${sysroot_dir}${boot_prefix}/boot.XXXXXXXXXX`
+-        ln -sf ${linux_dir} ${boots[$count]}/boot
++        ln -sf ..${linux_dir} ${boots[$count]}/boot
+         ln -sf ../..${ostree} ${boots[$count]}/ostree
+         count=`expr $count + 1`        
+     done
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0009-retrieve-correct-boot-prefix-at-runtime.patch b/debian/patches/debian/0009-retrieve-correct-boot-prefix-at-runtime.patch
new file mode 100644
index 00000000..45e92ae6
--- /dev/null
+++ b/debian/patches/debian/0009-retrieve-correct-boot-prefix-at-runtime.patch
@@ -0,0 +1,26 @@
+From 15f5d4c9fdb8d60ba029268dad03a356211bde59 Mon Sep 17 00:00:00 2001
+From: Yunguo Wei <yunguo.wei@windriver.com>
+Date: Mon, 7 May 2018 19:38:45 +0800
+Subject: [PATCH 09/12] retrieve correct boot prefix at runtime
+
+Signed-off-by: Yunguo Wei <yunguo.wei@windriver.com>
+---
+ src/boot/grub2/ostree-grub-generator | 2 ++
+ 1 file changed, 2 insertions(+)
+
+diff --git a/src/boot/grub2/ostree-grub-generator b/src/boot/grub2/ostree-grub-generator
+index a399336e..78e39888 100644
+--- a/src/boot/grub2/ostree-grub-generator
++++ b/src/boot/grub2/ostree-grub-generator
+@@ -81,6 +81,8 @@ populate_menu()
+     # Default to /boot if OSTREE_BOOT_PARTITION is not set and /boot is on the same device than ostree/repo
+     if [ -z ${OSTREE_BOOT_PARTITION+x} ] && [ -d /boot/ostree ] && [ -d /ostree/repo ] && [ $(stat -c '%d' /boot/ostree) -eq $(stat -c '%d' /ostree/repo) ]; then
+         boot_prefix="/boot"
++    elif [ -z ${OSTREE_BOOT_PARTITION} ] && [ -d /boot/efi/EFI/BOOT ]; then
++	boot_prefix="/boot"
+     else
+         boot_prefix="${OSTREE_BOOT_PARTITION}"
+     fi
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0011-tweak-regex-of-ostree-system-generator-for-wrlinux.patch b/debian/patches/debian/0011-tweak-regex-of-ostree-system-generator-for-wrlinux.patch
new file mode 100644
index 00000000..cc624601
--- /dev/null
+++ b/debian/patches/debian/0011-tweak-regex-of-ostree-system-generator-for-wrlinux.patch
@@ -0,0 +1,50 @@
+From 3f6e401e512af954330e5b2d09edabb29b4c6729 Mon Sep 17 00:00:00 2001
+From: Hongxu Jia <hongxu.jia@windriver.com>
+Date: Wed, 20 Jun 2018 10:22:09 +0800
+Subject: [PATCH 11/12] tweak regex of ostree-system-generator for wrlinux.
+
+The wrlinux has boot params ostree="/boot/0/ostree" on grub,
+or ostree="/ostree/0" on uboot which is a synlink point to
+the dir contains "boot.0/wrlinux/***".
+
+So tweak regex of ostree-system-generator for wrlinux.
+
+Upstream-Status: Inappropriate [wrlinux specific]
+
+Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
+---
+ src/libostree/ostree-impl-system-generator.c | 11 ++++++++---
+ 1 file changed, 8 insertions(+), 3 deletions(-)
+
+diff --git a/src/libostree/ostree-impl-system-generator.c b/src/libostree/ostree-impl-system-generator.c
+index ce40a698..d263a4a6 100644
+--- a/src/libostree/ostree-impl-system-generator.c
++++ b/src/libostree/ostree-impl-system-generator.c
+@@ -97,16 +97,21 @@ stateroot_from_ostree_cmdline (const char *ostree_cmdline,
+ {
+   static GRegex *regex;
+   static gsize regex_initialized;
++  char ostree_cmdline_new[PATH_MAX] = {0};
++
++  if (readlink(ostree_cmdline, ostree_cmdline_new, sizeof(ostree_cmdline_new)) < 0)
++      return glnx_null_throw (error, "Failed to readlink %s", ostree_cmdline);
++
+   if (g_once_init_enter (&regex_initialized))
+     {
+-      regex = g_regex_new ("^/ostree/boot.[01]/([^/]+)/", 0, 0, NULL);
++      regex = g_regex_new ("boot.[01]/wrlinux/([^/]+)/", 0, 0, NULL);
+       g_assert (regex);
+       g_once_init_leave (&regex_initialized, 1);
+     }
+ 
+   g_autoptr(GMatchInfo) match = NULL;
+-  if (!g_regex_match (regex, ostree_cmdline, 0, &match))
+-    return glnx_null_throw (error, "Failed to parse %s", ostree_cmdline);
++  if (!g_regex_match (regex, ostree_cmdline_new, 0, &match))
++    return glnx_null_throw (error, "Failed to parse %s", ostree_cmdline_new);
+ 
+   return g_match_info_fetch (match, 1);
+ }
+-- 
+2.17.1
+
diff --git a/debian/patches/debian/0012-deploy-using-etc-in-runtime-as-merge-source.patch b/debian/patches/debian/0012-deploy-using-etc-in-runtime-as-merge-source.patch
new file mode 100644
index 00000000..d8354218
--- /dev/null
+++ b/debian/patches/debian/0012-deploy-using-etc-in-runtime-as-merge-source.patch
@@ -0,0 +1,50 @@
+From 6dec1c473b8e2c0e5258eba96ddd908d0e9320a8 Mon Sep 17 00:00:00 2001
+From: Jiang Lu <lu.jiang@windriver.com>
+Date: Thu, 28 Jun 2018 16:29:45 +0800
+Subject: [PATCH 12/12] deploy:using /etc in runtime as merge source
+
+When deploy new ostree image, using /etc in runtime image as source for merge
+operation, instead of /etc in previouse image.
+
+For when upgrading a repo, user expected configuration in running system come
+into new ostree image.
+
+Signed-off-by: Jiang Lu <lu.jiang@windriver.com>
+---
+ src/libostree/ostree-sysroot-deploy.c |   18 +++++++++++++++---
+ 1 file changed, 15 insertions(+), 3 deletions(-)
+
+--- a/src/libostree/ostree-sysroot-deploy.c
++++ b/src/libostree/ostree-sysroot-deploy.c
+@@ -440,7 +440,12 @@ merge_configuration_from (OstreeSysroot
+ 
+   /* TODO: get rid of GFile usage here */
+   g_autoptr(GFile) orig_etc = ot_fdrel_to_gfile (merge_deployment_dfd, "usr/etc");
+-  g_autoptr(GFile) modified_etc = ot_fdrel_to_gfile (merge_deployment_dfd, "etc");
++  char *etc_merge_dir = getenv("OSTREE_ETC_MERGE_DIR");
++  g_autoptr(GFile) modified_etc;
++  if (etc_merge_dir)
++    modified_etc = g_file_new_for_path(etc_merge_dir);
++  else
++    modified_etc = ot_fdrel_to_gfile (merge_deployment_dfd, "etc");
+   /* Return values for below */
+   g_autoptr(GPtrArray) modified = g_ptr_array_new_with_free_func ((GDestroyNotify) ostree_diff_item_unref);
+   g_autoptr(GPtrArray) removed = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
+@@ -476,8 +481,15 @@ merge_configuration_from (OstreeSysroot
+   if (!glnx_opendirat (merge_deployment_dfd, "usr/etc", TRUE, &orig_etc_fd, error))
+     return FALSE;
+   glnx_autofd int modified_etc_fd = -1;
+-  if (!glnx_opendirat (merge_deployment_dfd, "etc", TRUE, &modified_etc_fd, error))
+-    return FALSE;
++  if (etc_merge_dir)
++    {
++      if (!glnx_opendirat (-1, etc_merge_dir, TRUE, &modified_etc_fd, error))
++        return FALSE;
++    }
++  else
++    if (!glnx_opendirat (merge_deployment_dfd, "etc", TRUE, &modified_etc_fd, error))
++      return FALSE;
++
+   glnx_autofd int new_etc_fd = -1;
+   if (!glnx_opendirat (new_deployment_dfd, "etc", TRUE, &new_etc_fd, error))
+     return FALSE;
diff --git a/debian/patches/series b/debian/patches/series
index b73e566a..429d1898 100644
--- a/debian/patches/series
+++ b/debian/patches/series
@@ -1 +1,17 @@
 debian/Skip-test-pull-repeated-during-CI.patch
+debian/0001-fsck-Throw-and-error-and-return-non-zero-for-non-ver.patch
+debian/0001-boot-Replace-deprecated-StandardOutput-syslog-with-j.patch
+debian/0001-ostree-first-2-patch.patch
+debian/0002-ostree-secure-boot-support-for-no-change-to-grub.cfg.patch
+debian/0003-Allow-updating-files-in-the-boot-directory.patch
+debian/0004-u-boot-add-bootdir-to-the-generated-uEnv.txt.patch
+debian/0005-uboot-add-non-default-for-bootdirs-to-uEnv.txt.patch
+debian/0006-ostree-swap-bootentry-atomically.patch
+debian/0007-using-bash-specifically.patch
+debian/0008-create-boot-symlink-based-on-relative-path.patch
+debian/0009-retrieve-correct-boot-prefix-at-runtime.patch
+debian/0011-tweak-regex-of-ostree-system-generator-for-wrlinux.patch
+debian/0012-deploy-using-etc-in-runtime-as-merge-source.patch
+debian/0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch
+debian/0001-ostree-sysroot-deploy-if-OSTREE_ETC_MERGE_DIR-none-s.patch
+debian/0001-deploy-Handle-a-read-only-boot-efi.patch
diff --git a/debian/rules b/debian/rules
index 1c76a8ce..0bd728c2 100755
--- a/debian/rules
+++ b/debian/rules
@@ -1,5 +1,6 @@
 #!/usr/bin/make -f
 
+export DEB_CFLAGS_MAINT_APPEND = -Werror=implicit-function-declaration -Werror=int-conversion
 export DEB_BUILD_MAINT_OPTIONS = hardening=+all
 export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed
 
@@ -16,17 +17,18 @@ configure_options = \
 	--enable-installed-tests \
 	--libexecdir='$${prefix}/libexec' \
 	--with-avahi \
-	--with-dracut \
+	--without-dracut \
 	--with-grub2 \
 	--with-grub2-mkconfig-path=/usr/sbin/grub-mkconfig \
 	--with-libarchive \
 	--with-libsystemd \
 	--with-libmount \
 	--with-soup \
-	--with-selinux \
+	--without-selinux \
 	--with-systemdsystemgeneratordir=/lib/systemd/system-generators \
 	--with-systemdsystemunitdir=/lib/systemd/system \
 	--without-smack \
+	--with-builtin-grub2-mkconfig \
 	$(NULL)
 
 ifneq ($(filter libostree-doc,$(binaries)),)
-- 
2.17.1

